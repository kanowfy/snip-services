// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.kny.services.snip

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct CreateSnippetRequest {
    #[serde(default)]
    pub content: String,
    #[serde(default)]
    pub title: String,
}

// Encode CreateSnippetRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_create_snippet_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &CreateSnippetRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("content")?;
    e.str(&val.content)?;
    e.str("title")?;
    e.str(&val.title)?;
    Ok(())
}

// Decode CreateSnippetRequest from cbor input stream
#[doc(hidden)]
pub fn decode_create_snippet_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<CreateSnippetRequest, RpcError> {
    let __result = {
        let mut content: Option<String> = None;
        let mut title: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct CreateSnippetRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => content = Some(d.str()?.to_string()),
                    1 => title = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "content" => content = Some(d.str()?.to_string()),
                    "title" => title = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        CreateSnippetRequest {
            content: if let Some(__x) = content {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateSnippetRequest.content (#0)".to_string(),
                ));
            },

            title: if let Some(__x) = title {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateSnippetRequest.title (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct CreateSnippetResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<u64>,
    #[serde(default)]
    pub success: bool,
}

// Encode CreateSnippetResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_create_snippet_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &CreateSnippetResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.id.as_ref() {
        e.str("id")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode CreateSnippetResponse from cbor input stream
#[doc(hidden)]
pub fn decode_create_snippet_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<CreateSnippetResponse, RpcError> {
    let __result = {
        let mut id: Option<Option<u64>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct CreateSnippetResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "id" => {
                        id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        CreateSnippetResponse {
            id: id.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateSnippetResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct DeleteSnippetResponse {
    #[serde(default)]
    pub success: bool,
}

// Encode DeleteSnippetResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_delete_snippet_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &DeleteSnippetResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode DeleteSnippetResponse from cbor input stream
#[doc(hidden)]
pub fn decode_delete_snippet_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<DeleteSnippetResponse, RpcError> {
    let __result = {
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct DeleteSnippetResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        DeleteSnippetResponse {
            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field DeleteSnippetResponse.success (#0)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct GetOneSnippetResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snippet: Option<Snippet>,
}

// Encode GetOneSnippetResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_get_one_snippet_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &GetOneSnippetResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    if let Some(val) = val.snippet.as_ref() {
        e.str("snippet")?;
        encode_snippet(e, val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode GetOneSnippetResponse from cbor input stream
#[doc(hidden)]
pub fn decode_get_one_snippet_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<GetOneSnippetResponse, RpcError> {
    let __result = {
        let mut snippet: Option<Option<Snippet>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct GetOneSnippetResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        snippet = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_snippet(d).map_err(|e| {
                                format!("decoding 'org.kny.services.snip#Snippet': {}", e)
                            })?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "snippet" => {
                        snippet = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_snippet(d).map_err(|e| {
                                format!("decoding 'org.kny.services.snip#Snippet': {}", e)
                            })?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        GetOneSnippetResponse {
            snippet: snippet.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct Snippet {
    #[serde(default)]
    pub content: String,
    #[serde(default)]
    pub id: u64,
    #[serde(default)]
    pub published: bool,
    #[serde(default)]
    pub title: String,
}

// Encode Snippet as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_snippet<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Snippet,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    e.str("content")?;
    e.str(&val.content)?;
    e.str("id")?;
    e.u64(val.id)?;
    e.str("published")?;
    e.bool(val.published)?;
    e.str("title")?;
    e.str(&val.title)?;
    Ok(())
}

// Decode Snippet from cbor input stream
#[doc(hidden)]
pub fn decode_snippet(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Snippet, RpcError> {
    let __result = {
        let mut content: Option<String> = None;
        let mut id: Option<u64> = None;
        let mut published: Option<bool> = None;
        let mut title: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct Snippet, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => content = Some(d.str()?.to_string()),
                    1 => id = Some(d.u64()?),
                    2 => published = Some(d.bool()?),
                    3 => title = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "content" => content = Some(d.str()?.to_string()),
                    "id" => id = Some(d.u64()?),
                    "published" => published = Some(d.bool()?),
                    "title" => title = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        Snippet {
            content: if let Some(__x) = content {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Snippet.content (#0)".to_string(),
                ));
            },

            id: if let Some(__x) = id {
                __x
            } else {
                return Err(RpcError::Deser("missing field Snippet.id (#1)".to_string()));
            },

            published: if let Some(__x) = published {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Snippet.published (#2)".to_string(),
                ));
            },

            title: if let Some(__x) = title {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Snippet.title (#3)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
pub type Snippets = Vec<Snippet>;

// Encode Snippets as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_snippets<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Snippets,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(val.len() as u64)?;
    for item in val.iter() {
        encode_snippet(e, item)?;
    }
    Ok(())
}

// Decode Snippets from cbor input stream
#[doc(hidden)]
pub fn decode_snippets(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Snippets, RpcError> {
    let __result = {
        if let Some(n) = d.array()? {
            let mut arr: Vec<Snippet> = Vec::with_capacity(n as usize);
            for _ in 0..(n as usize) {
                arr.push(
                    decode_snippet(d)
                        .map_err(|e| format!("decoding 'org.kny.services.snip#Snippet': {}", e))?,
                )
            }
            arr
        } else {
            // indefinite array
            let mut arr: Vec<Snippet> = Vec::new();
            loop {
                match d.datatype() {
                    Err(_) => break,
                    Ok(wasmbus_rpc::cbor::Type::Break) => break,
                    Ok(_) => {
                        arr.push(decode_snippet(d).map_err(|e| {
                            format!("decoding 'org.kny.services.snip#Snippet': {}", e)
                        })?)
                    }
                }
            }
            arr
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct UpdateSnippetRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(default)]
    pub published: bool,
    #[serde(rename = "targetId")]
    #[serde(default)]
    pub target_id: u64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

// Encode UpdateSnippetRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_update_snippet_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &UpdateSnippetRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    if let Some(val) = val.content.as_ref() {
        e.str("content")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("published")?;
    e.bool(val.published)?;
    e.str("targetId")?;
    e.u64(val.target_id)?;
    if let Some(val) = val.title.as_ref() {
        e.str("title")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode UpdateSnippetRequest from cbor input stream
#[doc(hidden)]
pub fn decode_update_snippet_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<UpdateSnippetRequest, RpcError> {
    let __result = {
        let mut content: Option<Option<String>> = Some(None);
        let mut published: Option<bool> = None;
        let mut target_id: Option<u64> = None;
        let mut title: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct UpdateSnippetRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        content = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => published = Some(d.bool()?),
                    2 => target_id = Some(d.u64()?),
                    3 => {
                        title = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "content" => {
                        content = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "published" => published = Some(d.bool()?),
                    "targetId" => target_id = Some(d.u64()?),
                    "title" => {
                        title = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        UpdateSnippetRequest {
            content: content.unwrap(),

            published: if let Some(__x) = published {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UpdateSnippetRequest.published (#1)".to_string(),
                ));
            },

            target_id: if let Some(__x) = target_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UpdateSnippetRequest.target_id (#2)".to_string(),
                ));
            },
            title: title.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct UpdateSnippetResponse {
    #[serde(default)]
    pub success: bool,
}

// Encode UpdateSnippetResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_update_snippet_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &UpdateSnippetResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode UpdateSnippetResponse from cbor input stream
#[doc(hidden)]
pub fn decode_update_snippet_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<UpdateSnippetResponse, RpcError> {
    let __result = {
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct UpdateSnippetResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        UpdateSnippetResponse {
            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UpdateSnippetResponse.success (#0)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Description of Snip service
/// wasmbus.actorReceive
#[async_trait]
pub trait Snip {
    async fn get_all_snippets(&self, ctx: &Context) -> RpcResult<Snippets>;
    async fn get_one_snippet(&self, ctx: &Context, arg: &u64) -> RpcResult<GetOneSnippetResponse>;
    async fn create_snippet(
        &self,
        ctx: &Context,
        arg: &CreateSnippetRequest,
    ) -> RpcResult<CreateSnippetResponse>;
    async fn update_snippet(
        &self,
        ctx: &Context,
        arg: &UpdateSnippetRequest,
    ) -> RpcResult<UpdateSnippetResponse>;
    async fn delete_snippet(&self, ctx: &Context, arg: &u64) -> RpcResult<DeleteSnippetResponse>;
}

/// SnipReceiver receives messages defined in the Snip service trait
/// Description of Snip service
#[doc(hidden)]
#[async_trait]
pub trait SnipReceiver: MessageDispatch + Snip {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "GetAllSnippets" => {
                let resp = Snip::get_all_snippets(self, ctx).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "GetOneSnippet" => {
                let value: u64 = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'U64': {}", e)))?;

                let resp = Snip::get_one_snippet(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "CreateSnippet" => {
                let value: CreateSnippetRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'CreateSnippetRequest': {}", e)))?;

                let resp = Snip::create_snippet(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "UpdateSnippet" => {
                let value: UpdateSnippetRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'UpdateSnippetRequest': {}", e)))?;

                let resp = Snip::update_snippet(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "DeleteSnippet" => {
                let value: u64 = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'U64': {}", e)))?;

                let resp = Snip::delete_snippet(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Snip::{}",
                message.method
            ))),
        }
    }
}

/// SnipSender sends messages to a Snip service
/// Description of Snip service
/// client for sending Snip messages
#[derive(Clone, Debug)]
pub struct SnipSender<T: Transport> {
    transport: T,
}

impl<T: Transport> SnipSender<T> {
    /// Constructs a SnipSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> SnipSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl SnipSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Snip for SnipSender<T> {
    #[allow(unused)]
    async fn get_all_snippets(&self, ctx: &Context) -> RpcResult<Snippets> {
        let buf = *b"";
        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Snip.GetAllSnippets",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: Snippets = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': Snippets", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn get_one_snippet(&self, ctx: &Context, arg: &u64) -> RpcResult<GetOneSnippetResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Snip.GetOneSnippet",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: GetOneSnippetResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': GetOneSnippetResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn create_snippet(
        &self,
        ctx: &Context,
        arg: &CreateSnippetRequest,
    ) -> RpcResult<CreateSnippetResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Snip.CreateSnippet",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: CreateSnippetResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': CreateSnippetResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn update_snippet(
        &self,
        ctx: &Context,
        arg: &UpdateSnippetRequest,
    ) -> RpcResult<UpdateSnippetResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Snip.UpdateSnippet",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: UpdateSnippetResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': UpdateSnippetResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn delete_snippet(&self, ctx: &Context, arg: &u64) -> RpcResult<DeleteSnippetResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Snip.DeleteSnippet",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: DeleteSnippetResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': DeleteSnippetResponse", e)))?;
        Ok(value)
    }
}
